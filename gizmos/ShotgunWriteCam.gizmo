#! C:/Program Files/Nuke12.2v3/nuke-12.2.3.dll -nx
version 12.2 v3
Gizmo {
 onCreate "try:\n  import sgtk\n  engine = sgtk.platform.current_engine()\n  context = engine.context\n  tk = engine.sgtk\n  if context.entity\['type'] == 'Asset':\n    entityType = 'asset'\n  else:\n    entityType = context.entity\['type']\n  stepID = context.step\['id']\n  stepCode = engine.shotgun.find_one('Step', \[\['id', 'is', stepID]], \['short_name'])\n  entityStep = stepCode\['short_name']\n  publish_template = tk.templates\['nuke_\{\}_camera_publish'.format(entityType.lower())]\n  nuke.thisNode()\['publish_template'].setValue('nuke_\{\}_camera_publish'.format(entityType.lower()))\n  publish_fields = context.as_template_fields(publish_template)\n  publish_fields\['Step'] = entityStep\n  publish_fields\['name'] = nuke.thisNode()\['SubName'].value()\n  version = os.path.basename(nuke.root().name()).split('.')\[0].split('_')\[-1]\n  version_number = int(version\[1:])\n  publish_fields\['version'] = version_number\n  publish_fields\['extension'] = nuke.thisNode().knob('file_type').value()\n  publish_path = publish_template.apply_fields(publish_fields)\n  fine_publish_path = publish_path.replace('\\\\', '/')\n  work_template = tk.templates\['nuke_\{\}_camera_work'.format(entityType.lower())]\n  nuke.thisNode()\['work_template'].setValue('nuke_\{\}_camera_work'.format(entityType.lower()))\n  work_fields = context.as_template_fields(work_template)\n  work_fields\['Step'] = entityStep\n  work_fields\['name'] = nuke.thisNode()\['SubName'].value()\n  work_fields\['version'] = version_number\n  work_fields\['extension'] = nuke.thisNode().knob('file_type').value()\n  work_path = work_template.apply_fields(work_fields)\n  fine_work_path = work_path.replace('\\\\', '/')\n  nuke.thisNode()\['Path'].setValue(fine_work_path)\n  nuke.thisNode()\['Publish_path'].setValue(fine_publish_path)\n  directory = os.path.dirname(fine_work_path)\n  contextpath = directory\[:directory.find('/STEPS/')]\n  local_path = directory\[directory.find('/STEPS/'):]\n  filename = os.path.basename(fine_work_path)\n  nuke.thisNode()\['Context_Folder'].setValue(contextpath)\n  nuke.thisNode()\['Local_path'].setValue(local_path)\n  nuke.thisNode()\['File_Name'].setValue(filename)\n  nuke.thisNode()\['autolabel'].setValue('nuke.thisNode()\[\"label\"].value() + nuke.thisNode()\[\"File_Name\"].value()')\nexcept:\n  print('Unable to set shotgunwriteGeo nodes yet')"
 knobChanged "try:\n  import sgtk\n  engine = sgtk.platform.current_engine()\n  context = engine.context\n  tk = engine.sgtk\n  if context.entity\['type'] == 'Asset':\n    entityType = 'asset'\n  else:\n    entityType = context.entity\['type']\n  stepID = context.step\['id']\n  stepCode = engine.shotgun.find_one('Step', \[\['id', 'is', stepID]], \['short_name'])\n  entityStep = stepCode\['short_name']\n  publish_template = tk.templates\['nuke_\{\}_camera_publish'.format(entityType.lower())]\n  if 'nuke_\{\}_camera_publish'.format(entityType.lower()) != nuke.thisNode()\['publish_template'].value():\n    nuke.thisNode()\['publish_template'].setValue('nuke_\{\}_camera_publish'.format(entityType.lower()))\n  publish_fields = context.as_template_fields(publish_template)\n  publish_fields\['Step'] = entityStep\n  publish_fields\['name'] = nuke.thisNode()\['SubName'].value()\n  version = os.path.basename(nuke.root().name()).split('.')\[0].split('_')\[-1]\n  version_number = int(version\[1:])\n  publish_fields\['version'] = version_number\n  publish_fields\['extension'] = nuke.thisNode().knob('file_type').value()\n  publish_path = publish_template.apply_fields(publish_fields)\n  fine_publish_path = publish_path.replace('\\\\', '/')\n  work_template = tk.templates\['nuke_\{\}_camera_work'.format(entityType.lower())]\n  if 'nuke_\{\}_camera_work'.format(entityType.lower()) != nuke.thisNode()\['work_template'].getValue():\n    nuke.thisNode()\['work_template'].setValue('nuke_\{\}_camera_work'.format(entityType.lower()))\n  work_fields = context.as_template_fields(work_template)\n  work_fields\['Step'] = entityStep\n  work_fields\['name'] = nuke.thisNode()\['SubName'].value()\n  work_fields\['version'] = version_number\n  work_fields\['extension'] = nuke.thisNode().knob('file_type').value()\n  work_path = work_template.apply_fields(work_fields)\n  fine_work_path = work_path.replace('\\\\', '/')\n  if nuke.thisNode()\['Path'].value() != fine_work_path:\n    nuke.thisNode()\['Path'].setValue(fine_work_path)\n  if nuke.thisNode()\['Publish_path'].value() != fine_publish_path:\n    nuke.thisNode()\['Publish_path'].setValue(fine_publish_path)\n  directory = os.path.dirname(fine_work_path)\n  contextpath = directory\[:directory.find('/STEPS/')]\n  local_path = directory\[directory.find('/STEPS/'):]\n  filename = os.path.basename(fine_work_path)\n  if nuke.thisNode()\['Context_Folder'].value() != contextpath:\n    nuke.thisNode()\['Context_Folder'].setValue(contextpath)\n  if nuke.thisNode()\['Local_path'].value() != local_path:\n    nuke.thisNode()\['Local_path'].setValue(local_path)\n  if nuke.thisNode()\['File_Name'].value() != filename:\n    nuke.thisNode()\['File_Name'].setValue(filename)\n  if nuke.thisNode()\['autolabel'].value() != 'nuke.thisNode()\[\"label\"].value() + nuke.thisNode()\[\"File_Name\"].value()':\n    nuke.thisNode()\['autolabel'].setValue('nuke.thisNode()\[\"label\"].value() + nuke.thisNode()\[\"File_Name\"].value()')\nexcept:\n  print('Unable to set shotgunwriteGeo nodes yet')"
 autolabel "nuke.thisNode()\[\"label\"].value() + nuke.thisNode()\[\"File_Name\"].value()"
 tile_color 0xa8392dff
 label "Shotgun Write CAM\n"
 note_font "Verdana Bold"
 addUserKnob {20 Write}
 addUserKnob {1 publish_template +INVISIBLE}
 addUserKnob {1 work_template +INVISIBLE}
 addUserKnob {1 SubName}
 SubName CAM
 addUserKnob {26 Context_Folder +STARTLINET}
 addUserKnob {26 Local_path +STARTLINET}
 addUserKnob {26 File_Name +STARTLINET}
 addUserKnob {1 Path +INVISIBLE}
 addUserKnob {1 Publish_path +INVISIBLE}
 addUserKnob {41 file_type l "file type" T WriteGeo1.file_type}
 addUserKnob {41 first l "frame range" T WriteGeo1.first}
 addUserKnob {41 last l "" -STARTLINE T WriteGeo1.last}
 addUserKnob {41 use_limit l "limit to range" T WriteGeo1.use_limit}
 addUserKnob {41 Execute T WriteGeo1.Execute}
 addUserKnob {20 "" l Python}
 addUserKnob {41 beforeRender l "before render" T WriteGeo1.beforeRender}
 addUserKnob {41 beforeFrameRender l "before each frame" T WriteGeo1.beforeFrameRender}
 addUserKnob {41 afterFrameRender l "after each frame" T WriteGeo1.afterFrameRender}
 addUserKnob {41 afterRender l "after render" T WriteGeo1.afterRender}
 addUserKnob {41 renderProgress l "render progress" T WriteGeo1.renderProgress}
}
 Input {
  inputs 0
  name Input1
 }
 WriteGeo {
  file "\[value this.parent.Path]"
  file_type abc
  storageFormat Ogawa
  beforeRender "if not os.path.exists(os.path.dirname(nuke.thisNode()\['file'].evaluate())):\n    os.mkdir(os.path.dirname(nuke.thisNode()\['file'].evaluate()))"
  afterRender "import nuke\nRenderVersionsLimit.DeleteOldVersions()"
  name WriteGeo1
 }
 Output {
  name Output1
 }
end_group
